package com.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.db.TopDeals;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOP_DEALS".
*/
public class TopDealsDao extends AbstractDao<TopDeals, String> {

    public static final String TABLENAME = "TOP_DEALS";

    /**
     * Properties of entity TopDeals.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Fpd_flag = new Property(2, String.class, "fpd_flag", false, "FPD_FLAG");
        public final static Property Off_percent = new Property(3, String.class, "off_percent", false, "OFF_PERCENT");
        public final static Property Current_price = new Property(4, String.class, "current_price", false, "CURRENT_PRICE");
        public final static Property Original_price = new Property(5, String.class, "original_price", false, "ORIGINAL_PRICE");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property Comments_count = new Property(7, String.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property All_posts_count = new Property(8, String.class, "all_posts_count", false, "ALL_POSTS_COUNT");
        public final static Property Created_at = new Property(9, String.class, "created_at", false, "CREATED_AT");
        public final static Property Score = new Property(10, String.class, "score", false, "SCORE");
        public final static Property Vote_value = new Property(11, String.class, "vote_value", false, "VOTE_VALUE");
        public final static Property State = new Property(12, String.class, "state", false, "STATE");
        public final static Property Description = new Property(13, String.class, "description", false, "DESCRIPTION");
        public final static Property Share_url = new Property(14, String.class, "share_url", false, "SHARE_URL");
        public final static Property Deal_url = new Property(15, String.class, "deal_url", false, "DEAL_URL");
    };


    public TopDealsDao(DaoConfig config) {
        super(config);
    }
    
    public TopDealsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOP_DEALS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"FPD_FLAG\" TEXT," + // 2: fpd_flag
                "\"OFF_PERCENT\" TEXT," + // 3: off_percent
                "\"CURRENT_PRICE\" TEXT," + // 4: current_price
                "\"ORIGINAL_PRICE\" TEXT," + // 5: original_price
                "\"IMAGE\" TEXT," + // 6: image
                "\"COMMENTS_COUNT\" TEXT," + // 7: comments_count
                "\"ALL_POSTS_COUNT\" TEXT," + // 8: all_posts_count
                "\"CREATED_AT\" TEXT," + // 9: created_at
                "\"SCORE\" TEXT," + // 10: score
                "\"VOTE_VALUE\" TEXT," + // 11: vote_value
                "\"STATE\" TEXT," + // 12: state
                "\"DESCRIPTION\" TEXT," + // 13: description
                "\"SHARE_URL\" TEXT," + // 14: share_url
                "\"DEAL_URL\" TEXT);"); // 15: deal_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOP_DEALS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TopDeals entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String fpd_flag = entity.getFpd_flag();
        if (fpd_flag != null) {
            stmt.bindString(3, fpd_flag);
        }
 
        String off_percent = entity.getOff_percent();
        if (off_percent != null) {
            stmt.bindString(4, off_percent);
        }
 
        String current_price = entity.getCurrent_price();
        if (current_price != null) {
            stmt.bindString(5, current_price);
        }
 
        String original_price = entity.getOriginal_price();
        if (original_price != null) {
            stmt.bindString(6, original_price);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindString(8, comments_count);
        }
 
        String all_posts_count = entity.getAll_posts_count();
        if (all_posts_count != null) {
            stmt.bindString(9, all_posts_count);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(10, created_at);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(11, score);
        }
 
        String vote_value = entity.getVote_value();
        if (vote_value != null) {
            stmt.bindString(12, vote_value);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(13, state);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(14, description);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(15, share_url);
        }
 
        String deal_url = entity.getDeal_url();
        if (deal_url != null) {
            stmt.bindString(16, deal_url);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TopDeals readEntity(Cursor cursor, int offset) {
        TopDeals entity = new TopDeals( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fpd_flag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // off_percent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // current_price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // original_price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // comments_count
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // all_posts_count
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // created_at
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // score
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // vote_value
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // state
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // description
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // share_url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // deal_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TopDeals entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFpd_flag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOff_percent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrent_price(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOriginal_price(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComments_count(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAll_posts_count(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreated_at(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScore(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVote_value(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setState(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setShare_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDeal_url(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TopDeals entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TopDeals entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
